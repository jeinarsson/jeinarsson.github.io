<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jonas Einarsson</title>
    <description>Hacker, engineer, physicist, dad. Personal and technical notes.
</description>
    <link>http://www.jonaseinarsson.se/</link>
    <atom:link href="http://www.jonaseinarsson.se/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 26 May 2016 20:38:42 +0200</pubDate>
    <lastBuildDate>Thu, 26 May 2016 20:38:42 +0200</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>A biological computer, graph reachability, and P=NP</title>
        <description>&lt;p&gt;In a recent &lt;a href=&quot;http://www.pnas.org/content/113/10/2591.full&quot;&gt;&lt;span class=&quot;caps&quot;&gt;PNAS&lt;/span&gt; paper &amp;#40;open access&amp;#41;&lt;/a&gt; Nicolau et al. describe a proof-of-concept biological parallel computing device. The intention is that their approach may &amp;#8220;solve larger combinatorial problems than existing computation devices&amp;#8221;. In particular they want to circumvent the super-polynomial time requirement to solve a NP-complete problem. Hacker News discussions &lt;a href=&quot;https://news.ycombinator.com/item?id=11186640&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=11194015&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wrote a critique of their approach in a Letter to &lt;span class=&quot;caps&quot;&gt;PNAS&lt;/span&gt; &lt;a href=&quot;http://www.pnas.org/content/early/2016/05/24/1603944113.full&quot;&gt;&amp;#40;paywall&amp;#41;&lt;/a&gt; &lt;a href=&quot;http://www.pnas.org.sci-hub.cc/content/early/2016/05/24/1603944113.full&quot;&gt;&amp;#40;sci-hub&amp;#41;&lt;/a&gt;, and they replied &lt;a href=&quot;http://www.pnas.org/content/early/2016/05/24/1605214113.full&quot;&gt;&amp;#40;paywall&amp;#41;&lt;/a&gt; &lt;a href=&quot;http://www.pnas.org.sci-hub.cc/content/early/2016/05/24/1605214113.full&quot;&gt;&amp;#40;sci-hub&amp;#41;&lt;/a&gt; (summarized briefly below). (aside: I can&amp;#8217;t believe &lt;span class=&quot;caps&quot;&gt;PNAS&lt;/span&gt; pay-walls criticism to openly published scientific papers &amp;#8211; what&amp;#8217;s the message?)&lt;/p&gt;
&lt;p&gt;In response to this conversation I want to make a very simple critique of their approach. In one sentence: &lt;strong&gt;If they can build it, I can simulate it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll detail this argument in this post. In particular I argue that if they are right, they settle &lt;a href=&quot;https://en.wikipedia.org/wiki/P_versus_NP_problem&quot;&gt;P=NP&lt;/a&gt; once and for all.&lt;/p&gt;
&lt;h1&gt;The biological computer&lt;/h1&gt;
&lt;p&gt;In their words, the approach is &amp;#8220;based on encoding combinatorial problems into the geometry of a physical network of lithographically defined channels, followed by exploration of the network in a parallel fashion using a large number of independent agents&amp;#8221;. The network is built of junctions that either just propagate the agents, or randomly makes them go onto one of two different paths. Given enough agents all possible paths will be visited. This structure makes the network a directed graph.&lt;/p&gt;
&lt;p&gt;The solution to the combinatorial problem is found by reading out which nodes in the physical network is visited by the agents. They built an example solving the &lt;a href=&quot;https://en.wikipedia.org/wiki/Subset_sum_problem&quot;&gt;Subset Sum problem&lt;/a&gt; instance {2,5,9}, and the corresponding network is detailed in &lt;a href=&quot;http://www.pnas.org/content/113/10/2591/F1.expansion.html&quot;&gt;their Fig. 1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because many independent agents can explore the physical network simultaneously, the intention is to &amp;#8220;[replace] the requirement for exponentially growing time needed by traditional, electronic computers to solve NP-complete problems, with the requirement for an exponentially growing number of independent computing agents.&amp;#8221;&lt;/p&gt;
&lt;h1&gt;My critique, and their reply&lt;/h1&gt;
&lt;p&gt;In my Letter I detail why their approach does not scale better than a conventional computer for the &lt;span class=&quot;caps&quot;&gt;SSP&lt;/span&gt;. Basically, for any &amp;#8220;hard&amp;#8221; version of the &lt;span class=&quot;caps&quot;&gt;SSP&lt;/span&gt; the network, and therefore the computation time, grows large, and for any other instance a dynamic programming algorithm solves the problem efficiently.&lt;/p&gt;
&lt;p&gt;Their answer is, paraphrased, that the dynamic programming solution is specific for the &lt;span class=&quot;caps&quot;&gt;SSP&lt;/span&gt;, and that their concept is more general: &amp;#8220;Our concept comprises the conversion of a mathematical problem into a network of channels and nodes. If the network appropriately mirrors the problem, each unique trajectory through it corresponds to evaluating one solution from the pool of all potential solutions.&amp;#8221;&lt;/p&gt;
&lt;h1&gt;If you can build it, I can simulate it&lt;/h1&gt;
&lt;p&gt;According to Nicolau et. al. their concept is to create a directed graph that represents a combinatorial problem, and find paths from any inlet node to any other node. The solution of the combinatorial problem is encoded in these paths.&lt;/p&gt;
&lt;p&gt;Unlike me, you may at this point realize that we are solving the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reachability&quot;&gt;reachability problem&lt;/a&gt;, for which there are fast polynomial algorithms, optimized depending on graph topology, and so forth.&lt;/p&gt;
&lt;p&gt;But I did not realize that, so let&amp;#8217;s say we want to simulate the biological circuit a bit more closely. Can we simulate the system in general? Yes: weight propagation on a directed graph can be solved in polynomial time in the number of vertices &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;V&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.22222em;&quot;&gt;V&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. For concreteness, here&amp;#8217;s a naive algorithm of polynomial complexity:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Let &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;bold&quot;&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbf x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.44444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.44444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathbf&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; be the dimension &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;V&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.22222em;&quot;&gt;V&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; vector that indicates if a node is visited (&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x_i&amp;gt;0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.79444em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) or not (&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x_i=0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.79444em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/li&gt;
	&lt;li&gt;Let &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;double-struck&quot;&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbb A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68889em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68889em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathbb&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; be the &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;V\times V&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.76666em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.22222em;&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.22222em;&quot;&gt;V&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Adjacency_matrix&quot;&gt;adjacency matrix&lt;/a&gt; for the network. The action of this matrix is to propagate weight on the vertices one step along the edges of the graph.&lt;/li&gt;
	&lt;li&gt;Initialize &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;bold&quot;&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbf x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.44444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.44444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathbf&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to all zeros, but put a 1 in any input node&lt;/li&gt;
	&lt;li&gt;For each time step compute &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi mathvariant=&quot;bold&quot;&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;n&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi mathvariant=&quot;double-struck&quot;&gt;A&lt;/mi&gt;&lt;msub&gt;&lt;mi mathvariant=&quot;bold&quot;&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;o&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbf x_{\mathrm new}= \mathbb A \mathbf x_{\mathrm old}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68889em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.83889em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;&quot;&gt;&lt;span class=&quot;mord mathbf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.02691em;&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mord mathbb&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;&quot;&gt;&lt;span class=&quot;mord mathbf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;After &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;V&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.22222em;&quot;&gt;V&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; steps all non-zero elements of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;bold&quot;&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbf x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.44444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.44444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathbf&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; indicate the reachable nodes (because no path can be longer than &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;V&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.22222em;&quot;&gt;V&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This algorithm closely matches how the biological device functions. You could make a movie of the time steps, and save intermediate states and so on. All in polynomial time in the number of vertices.&lt;/p&gt;
&lt;p&gt;In summary, any biological computation device that can be encoded in a directed graph of polynomial size, can also be simulated in polynomial time.&lt;/p&gt;
&lt;h1&gt;What&amp;#8217;s the mistake?&lt;/h1&gt;
&lt;p&gt;The idea to replace the exponential time requirement with an exponential amount of computing agents is a red herring. In a computer simulation of the physical network there is no cost of splitting at a junction in the graph, whereas in real life one extra agent is needed for each path.&lt;/p&gt;
&lt;p&gt;Instead, the strong assumption is that the physical network size must not scale exponentially with the problem. Nicolau et. al. somewhat casually mentions this in the original publication: &amp;#8220;For normal cases, in which the gaps grow less than exponentially, e.g. if the set comprises consecutive prime numbers, the horizontal network length grows polynomially.&amp;#8221;, and again in their reply to my Letter: &amp;#8220;Is it possible to encode other NP-complete problems into &amp;#8216;compact&amp;#8217; networks and, by using controlled self-replication, to bring an exponentially growing army of agents to bear on an exponentially growing solution pool?&amp;#8221;&lt;/p&gt;
&lt;p&gt;This casual requirement of a &amp;#8220;compact&amp;#8221; network is actually very strong, and precisely the reason why an efficient simulation of their device is possible. Should such a compact representation of a NP-complete problem exist, we can simulate it in polynomial time on a computer, and P=NP is settled.&lt;/p&gt;</description>
        <pubDate>Thu, 26 May 2016 00:00:00 +0200</pubDate>
        <link>http://www.jonaseinarsson.se/2016/biological-computer-graph-reachability-p-np.html</link>
        <guid isPermaLink="true">http://www.jonaseinarsson.se/2016/biological-computer-graph-reachability-p-np.html</guid>
        
        
      </item>
    
      <item>
        <title>Sorry, I only peer-review Open Access papers</title>
        <description>&lt;p&gt;Since I finished my Ph.D I started getting requests to referee papers for publication in my field.&lt;/p&gt;
&lt;p&gt;Personally I try to make all my research available under an open license, for example some variant of the Creative Commons. Although if you scrutinize my short track record, you can see that I already failed at some instances..&lt;/p&gt;
&lt;p&gt;Nevertheless, I decided to extend this personal policy to peer-review. I only referee Open Access papers. It has to be clear at the time of peer-review that the paper will, definitely, be published Open Access.&lt;/p&gt;
&lt;p&gt;I realize that I make trouble short-term for the editors who ask me to peer-review. Editors who are also my collegues and friends. I&amp;#8217;m sorry for that. But I believe it is a neccessary step towards open science and I dare others to follow.&lt;/p&gt;</description>
        <pubDate>Wed, 20 Apr 2016 00:00:00 +0200</pubDate>
        <link>http://www.jonaseinarsson.se/2016/only-open-access-peer-review.html</link>
        <guid isPermaLink="true">http://www.jonaseinarsson.se/2016/only-open-access-peer-review.html</guid>
        
        
      </item>
    
      <item>
        <title>Interactive Fractal Spiral Generator (d3.js) [DRAFT]</title>
        <description>&lt;p&gt;Describe fractal spirals &lt;a href=&quot;http://www.jonaseinarsson.se/fractal-spirals/&quot;&gt;http://www.jonaseinarsson.se/fractal-spirals/&lt;/a&gt;&lt;/p&gt;</description>
        <pubDate>Wed, 20 Apr 2016 00:00:00 +0200</pubDate>
        <link>http://www.jonaseinarsson.se/2016/fractal-spirals-d3.html</link>
        <guid isPermaLink="true">http://www.jonaseinarsson.se/2016/fractal-spirals-d3.html</guid>
        
        
      </item>
    
      <item>
        <title>Interactive Fractal Curve Generator (d3.js) [DRAFT]</title>
        <description>&lt;p&gt;Describe fractal curves &lt;a href=&quot;http://www.jonaseinarsson.se/fractal-curves/&quot;&gt;http://www.jonaseinarsson.se/fractal-curves/&lt;/a&gt;&lt;/p&gt;</description>
        <pubDate>Wed, 20 Apr 2016 00:00:00 +0200</pubDate>
        <link>http://www.jonaseinarsson.se/2016/fractal-curves-d3.html</link>
        <guid isPermaLink="true">http://www.jonaseinarsson.se/2016/fractal-curves-d3.html</guid>
        
        
      </item>
    
      <item>
        <title>Visualizing paths as flows in a Sankey diagram (D3.js)</title>
        <description>&lt;p&gt;I made an &lt;a href=&quot;http://demokratikollen.se/forslagen/reinfeldt2&quot;&gt;interactive visualization&lt;/a&gt; (Swedish) of the flow of proposals (bills) and decisions in the Swedish parliament. The visualization combines features of a straightforward Tree (path visualization) with those of a Sankey diagram (flow visualization).&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a screenshot, click on it to go to the full version:&lt;/p&gt;
&lt;figure class=&quot;full&quot;&gt;
&lt;a href=&quot;http://demokratikollen.se/forslagen/reinfeldt2&quot;&gt;&lt;img src=&quot;/figures/pathSankey/screenshot.png&quot;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;I&amp;#8217;m quite satisfied with how it turned out, and the remainder of this post is a brief description of what I did and what I&amp;#8217;d do differently the next time.&lt;/p&gt;
&lt;p&gt;The main idea is to show &lt;em&gt;both&lt;/em&gt; the Tree and the Sankey in the same figure, at the same time. I will explain this precisely below, but first I will describe what type of data we are dealing with.&lt;/p&gt;
&lt;h1&gt;The data: proposal paths&lt;/h1&gt;
&lt;p&gt;In the Swedish Parliament a &lt;em&gt;proposal&lt;/em&gt; is submitted by a member, a party or the government. After submission the proposal is considered by a &lt;em&gt;committee&lt;/em&gt; which prepares a simple yes/no question for the parliament to vote on. The vote renders a final &lt;em&gt;decision&lt;/em&gt; to reject or accept the proposal.&lt;/p&gt;
&lt;p&gt;The data I have are all &lt;strong&gt;paths&lt;/strong&gt;: &lt;em&gt;Proposal source&lt;/em&gt; &amp;#8594; &lt;em&gt;Committee&lt;/em&gt; &amp;#8594; &lt;em&gt;Decision&lt;/em&gt;. There is one path for each proposal, and there are around 50,000 proposals during a 4-year period. Many proposals take the same path, for example in 2010-2014 the &lt;em&gt;Social democrats&lt;/em&gt; submitted 498 proposals which were considered by the &lt;em&gt;Foreign affairs committee&lt;/em&gt; and then &lt;em&gt;rejected&lt;/em&gt;. The &lt;em&gt;government&lt;/em&gt; submitted 125 proposals which went through the &lt;em&gt;Traffic committee&lt;/em&gt; and were &lt;em&gt;accepted&lt;/em&gt;, and so on.&lt;/p&gt;
&lt;p&gt;The data I visualize are the number of proposals on each path.&lt;/p&gt;
&lt;p&gt;This type of data are weighted paths on a graph, and therefore represents sequences of events in general. For instance, &lt;a href=&quot;http://bl.ocks.org/kerryrodden/7090426&quot;&gt;navigation paths on a website&lt;/a&gt; is an important example of such data. But also things like character and word sequences in linguistics, or call stack traces in computing could be fun to look at.&lt;/p&gt;
&lt;p&gt;In my case with the proposals, the graph is very simple: three &amp;#8220;layers&amp;#8221; without internal connections, and no loops. However, the main idea presented here should work for other types of graphs, too.&lt;/p&gt;
&lt;h1&gt;The (false) dichotomy: Visualize paths or flows&lt;/h1&gt;
&lt;p&gt;For clarity in the following examples I use mock data with fewer nodes and paths than the original. The numbers are made up.&lt;/p&gt;
&lt;p&gt;If we visualize all the paths we get a &lt;strong&gt;Tree&lt;/strong&gt; (with multiple roots). Like this:&lt;/p&gt;
&lt;figure class=&quot;full&quot;&gt;
&lt;svg id=&quot;figExamplePaths&quot; viewBox=&#39;0 0 450 250&#39; preserveAspectRatio=&quot;xMinYMin meet&quot; width=&quot;450&quot; height=&quot;250&quot;/&gt;
&lt;figcaption&gt;The &quot;government&quot; node is pre-selected, click on nodes to see their connections.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The Tree shows all the data, and therefore renders many nodes. The number of nodes in the last layer is the number of sources &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\times&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.66666em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;×&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; number of committees &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\times&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.66666em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;×&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; number of decisions. In the real data this amounts to roughly 400 nodes. The Tree may be a good alternative for smaller datasets, or with additional filtering.&lt;/p&gt;
&lt;p&gt;On the other hand, if we show the nodes only once and aggregate the paths between them into flows we get a &lt;strong&gt;Sankey&lt;/strong&gt; diagram. Like this:&lt;/p&gt;
&lt;figure class=&quot;full&quot;&gt;
&lt;svg id=&quot;figExampleFlows&quot; viewBox=&#39;0 0 450 250&#39; preserveAspectRatio=&quot;xMinYMin meet&quot; width=&quot;450&quot; height=&quot;250&quot;/&gt;
&lt;figcaption&gt;The &quot;government&quot; node is pre-selected, click on nodes to see their connections.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The Sankey is less cluttered and correctly shows the magnitude of the flow between any two nodes. But aggregating paths into flows destroys information about longer paths: you can see the magnitude of the flow between the &lt;em&gt;Government&lt;/em&gt; node and the &lt;em&gt;Traffic&lt;/em&gt; committee, but you can not see how many of those were &lt;em&gt;Accepted&lt;/em&gt; or &lt;em&gt;Rejected&lt;/em&gt;. Compare to the Tree above, where this path information is present, but illegible as the number of nodes explodes.&lt;/p&gt;
&lt;h1&gt;Resolution: Visualize both paths and flows&lt;/h1&gt;
&lt;p&gt;My attempt at this problem is to draw the full Tree, but make it look like the Sankey. Think of it as taking the Tree figure above, and carefully arranging the positions of all the paths so that it looks like the Sankey figure. Like this:&lt;/p&gt;
&lt;figure class=&quot;full&quot;&gt;
&lt;svg id=&quot;figExampleSankey&quot; viewBox=&#39;0 0 450 250&#39; preserveAspectRatio=&quot;xMinYMin meet&quot; width=&quot;450&quot; height=&quot;250&quot;/&gt;
&lt;figcaption&gt;The &quot;government&quot; node is pre-selected, click on nodes to see their connections.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The path structure is revealed when the user selects one of the nodes. Selecting a node highlights all paths passing through that node. Therefore we clearly see the flow from the &lt;em&gt;Government&lt;/em&gt; node to the &lt;em&gt;Traffic&lt;/em&gt; committee, and then also how that flow splits into one part to &lt;em&gt;Accepted&lt;/em&gt; and one part to &lt;em&gt;Rejected&lt;/em&gt;. By arranging the Tree to look like a Sankey we lift some of the initial cognitive load for the user, while allowing them to browse a richer dataset once they grasp what they are looking at. In my original figure I use this &amp;#8220;path Sankey&amp;#8221; as an overview. When user selects a node, all its paths are highlighted and a detail view is triggered to show a list of the relevant proposals.&lt;/p&gt;
&lt;p&gt;There is a drawback which I have not found any solution to: arranging the paths to look like the Sankey disrupts the visual continuity of the paths (seen when highlighted). The path, say, &lt;em&gt;Government&lt;/em&gt; &amp;#8594; &lt;em&gt;Traffic committee&lt;/em&gt; &amp;#8594; &lt;em&gt;Rejected&lt;/em&gt; is visually discontinuous at the committee node. This drawback is most obvious with small and moderate datasets, like in these examples. The visual disruption is diminished when there are more nodes and smaller flows, like in the &lt;a href=&quot;http://demokratikollen.se/forslagen/reinfeldt2&quot;&gt;original figure&lt;/a&gt; where I think it works all right.&lt;/p&gt;
&lt;p&gt;This method works for paths with three steps. If additional layers are shown, the visual &amp;#8220;memory&amp;#8221; only reaches two steps back. Nevertherless, the two steps are an improvement over the original Sankey&amp;#8217;s single step memory.&lt;/p&gt;
&lt;h1&gt;What should be improved&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jeinarsson/pathSankey&quot;&gt;My implementation&lt;/a&gt; of this figure in D3.js works well, but it has a number of flaws which I think should be addressed:&lt;/p&gt;
&lt;h2&gt;1. Partition both nodes and flows&lt;/h2&gt;
&lt;p&gt;My implementation partitions the Sankey flows into the parts from the Tree representation, but the nodes are still monolithic.&lt;/p&gt;
&lt;p&gt;To fully carry through the thought of &amp;#8220;rearranging the Tree into a Sankey&amp;#8221;, the Sankey nodes should be made by stacking the corresponding small nodes in the Tree. This would allow for more precise highlighting during user interactions.&lt;/p&gt;
&lt;p&gt;This may enhance the visual discontinuity discussed above, nevertheless I believe it&amp;#8217;s worth trying.&lt;/p&gt;
&lt;h2&gt;2. Better rendering&lt;/h2&gt;
&lt;p&gt;My implementation literally renders the elements of the Tree, rearranged into a Sankey. This unfortunately results in&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Lots of &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; elements, making rendering slower,&lt;/li&gt;
	&lt;li&gt;Glitches (seams) between the sub-flows making up the whole (depending on &lt;span class=&quot;caps&quot;&gt;SVG&lt;/span&gt; renderer, zoom level etc), and&lt;/li&gt;
	&lt;li&gt;The z-order of the flows makes the appearance of highlighted flows in relation to other flows inconsistent.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I propose to draw the composite Sankey flows as a single &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; and append/remove the &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; elements representing the highlighted path. This reduces the number of &lt;span class=&quot;caps&quot;&gt;SVG&lt;/span&gt; elements, removes the seams and makes z-order consistent.&lt;/p&gt;
&lt;h2&gt;3. More general graphs&lt;/h2&gt;
&lt;p&gt;My implementation is tailored after the particular data I had in mind. Thus the layout is based on &lt;em&gt;layers&lt;/em&gt; of &lt;em&gt;node groups&lt;/em&gt; of &lt;em&gt;nodes&lt;/em&gt;. This makes automatic layout simple and robust, but the code is not flexible enough for many other types of data.&lt;/p&gt;
&lt;p&gt;Therefore, the overall positions of nodes and flows should be determined first, like for a Sankey. This layout step may be automated, by hand, or both. The point is that it is a separate concern to partition these given elements into the sub-flows and sub-nodes necessary for highlighting the underlying path data. This is an algorithmic step which should not require additional input by any designer.&lt;/p&gt;
&lt;h1&gt;Finally&lt;/h1&gt;
&lt;p&gt;Code (&lt;span class=&quot;caps&quot;&gt;MIT&lt;/span&gt; Licence) at &lt;a href=&quot;http://github.com/jeinarsson/pathSankey&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a minimal example in &lt;a href=&quot;http://bl.ocks.org/jeinarsson/4e748e4bfe42d4f52ae9&quot;&gt;a bl.ocks here&lt;/a&gt; and a more advanced example with randomized data in &lt;a href=&quot;http://bl.ocks.org/jeinarsson/e37aa55c3b0e11ae6fa1&quot;&gt;another bl.ocks here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more code, see the source of this page and of the &lt;a href=&quot;http://demokratikollen.se/forslagen/reinfeldt2&quot;&gt;original interactive visualization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you found this post interesting, you will also like &lt;a href=&quot;http://elijahmeeks.com/#content/blog/2015_06_10_sankey&quot;&gt;a short piece by Elijah Meeks&lt;/a&gt; on Sankey diagrams for path visualization at Netflix.&lt;/p&gt;
&lt;p&gt;Write me an e-mail or ping me on Twitter if you found this useful or interesting, or if you have any questions or comments.&lt;/p&gt;</description>
        <pubDate>Mon, 22 Jun 2015 00:00:00 +0200</pubDate>
        <link>http://www.jonaseinarsson.se/2015/paths-sankey-d3.html</link>
        <guid isPermaLink="true">http://www.jonaseinarsson.se/2015/paths-sankey-d3.html</guid>
        
        
      </item>
    
  </channel>
</rss>
